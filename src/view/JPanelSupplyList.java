/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * JPanelSupplyList.java
 *
 * Created on 26.02.2009, 17:50:46
 */

package view;

import entity.Supply;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JScrollBar;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.BadLocationException;
import util.ConvertUtil;
import view.componentmodel.TMSupply;

/**
 *
 * @author е
 */
public class JPanelSupplyList extends javax.swing.JPanel {

    private List<Supply> ListSupplies;

    private boolean Editable;
    /**
     * Creates new form JPanelSupplyList
     */
    public JPanelSupplyList() {
        initComponents();
        setEditable(false);
        getTable().setColumnSelectionAllowed(false);

        DocumentListener dl = new DocumentListenerSearch();
        getJPanelSearch().addjTextFieldSearchTemplateDocumentListener(dl);

        ActionListener l = new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                int index = 0;
                try {
                    index = getSelectedIndex() + 1;
                    if (index == ListSupplies.size()) index = 0;
                } catch (ArrayIndexOutOfBoundsException ex) {
                    Logger.getLogger(JPanelSupplyList.class.getName()).log(Level.WARNING, ex.getMessage(), ex);
                }
                SearchNext(getJPanelSearch().getSearchTemplate(), index);
            }
        };
        getJPanelSearch().addjButtonNextActionListener(l);//search next

        l = new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                int index = ListSupplies.size() - 1;
                try {
                    index = getSelectedIndex() - 1;
                    if (index == -1) index = ListSupplies.size() - 1;
                } catch (ArrayIndexOutOfBoundsException ex) {
                    Logger.getLogger(JPanelSupplyList.class.getName()).log(Level.WARNING, ex.getMessage(), ex);
                }
                SearchPrev(getJPanelSearch().getSearchTemplate(), index);
            }
        };
        getJPanelSearch().addjButtonPrevActionListener(l); //search prev
    }

//    public JPanelSupplyList(List<Supply> list) {
//        this();
//        setItemList(list);
//    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPaneSupplyList = new javax.swing.JScrollPane();
        jTableSupplyList = new javax.swing.JTable();
        jPanelSearch1 = new view.JPanelSearch();
        jPanelAddEditRemove1 = new view.JPanelAddEditRemove();

        jTableSupplyList.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jTableSupplyList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "№", "Наименование", "Артикул", "Цена", "Остаток"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableSupplyList.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTableSupplyList.setColumnSelectionAllowed(true);
        jTableSupplyList.getTableHeader().setReorderingAllowed(false);
        jScrollPaneSupplyList.setViewportView(jTableSupplyList);
        jTableSupplyList.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanelSearch1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 347, Short.MAX_VALUE)
                .addComponent(jPanelAddEditRemove1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jScrollPaneSupplyList, javax.swing.GroupLayout.DEFAULT_SIZE, 728, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jScrollPaneSupplyList, javax.swing.GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanelSearch1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanelAddEditRemove1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private view.JPanelAddEditRemove jPanelAddEditRemove1;
    private view.JPanelSearch jPanelSearch1;
    private javax.swing.JScrollPane jScrollPaneSupplyList;
    private javax.swing.JTable jTableSupplyList;
    // End of variables declaration//GEN-END:variables

    // <editor-fold defaultstate="collapsed" desc="ActionListeners">
    public void addDoubleClickOnTableListener(final ActionListener l)
    {
        getTable().addMouseListener(ConvertUtil.convert(l));
    }
    // </editor-fold>

public void Search(DocumentEvent e)
    {
        try {
            SearchNext(e.getDocument().getText(0, e.getDocument().getLength()), 0);
        } catch (BadLocationException ex) {
            Logger.getLogger(JPanelSupplyList.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private boolean checkSearchArgs(String template, int pos) {
        if (template == null || template.equals("")) return false;
        if (pos < 0 || pos >= ListSupplies.size()) return false;
        return true;
    }
    //SearchNext и SearchPrev требуют рефакторинга!
    public void SearchNext(String template, int pos)
    {
        if (!checkSearchArgs(template, pos)) return;
        for(int i = pos; i < ListSupplies.size(); i++){
            if (ListSupplies.get(i).getProduct().getTitle().toLowerCase().startsWith(template.toLowerCase())){
                setSelectedIndex(i);
                getJPanelSearch().setHavingResult(true);
                return;
            }
        }
        for(int i = 0; i < pos; i++)
            if (ListSupplies.get(i).getProduct().getTitle().toLowerCase().startsWith(template.toLowerCase())){
                setSelectedIndex(i);
                getJPanelSearch().setHavingResult(true);
                return;
            }

        getJPanelSearch().setHavingResult(false);
    }

    public void SearchPrev(String template, int pos)
    {
        if (!checkSearchArgs(template, pos)) return;
        for(int i = pos; i >= 0; i--){
            if (ListSupplies.get(i).getProduct().getTitle().toLowerCase().startsWith(template.toLowerCase())){
                setSelectedIndex(i);
                getJPanelSearch().setHavingResult(true);
                return;
            }
        }
        for(int i = ListSupplies.size() - 1; i > pos; i--)
            if (ListSupplies.get(i).getProduct().getTitle().toLowerCase().startsWith(template.toLowerCase())){
                setSelectedIndex(i);
                getJPanelSearch().setHavingResult(true);
                return;
            }
        getJPanelSearch().setHavingResult(false);
    }

    /**
     * @return the jPanelSearch
     */
    public view.JPanelSearch getJPanelSearch() {
        return jPanelSearch1;
    }

    /**
     * @return the jPanelSearch
     */
    public view.JPanelAddEditRemove getJPanelAddEditRemove() {
        return jPanelAddEditRemove1;
    }

    /**
     * @return the jTableSupplyList
     */
    public javax.swing.JTable getTable() {
        return jTableSupplyList;
    }

    /**
     * @return the jScrollPaneSupplyList
     */
    public javax.swing.JScrollPane getScrollPane() {
        return jScrollPaneSupplyList;
    }

    public void viewAllColumns() {
         for(int i = 0; i < getTable().getColumnCount(); i++){
            setColumnVisible(i,true);
        }
    }

    public void setColumnVisible(int index, boolean isVisible){
        if (index < 0 || index > getTable().getColumnCount() - 1) return;
        int tmp = 0;
        if (isVisible)
            try {
                tmp = ((TMSupply)getTable().getModel()).getColumnPreferredWidth(index);
            }
            catch (ClassCastException ex) {
                System.out.println(ex.getMessage());
            }
        getTable().getColumnModel().getColumn(index).setPreferredWidth(tmp);
    }

        /**
     * @return the ListSupplies
     */
    public List<Supply> getItemList() {
        return ListSupplies;
    }

    public void setItemList(List<Supply> list) {
        ListSupplies = list;
        getTable().setModel(new TMSupply(ListSupplies));
        for(int i = 0; i < getTable().getColumnCount(); i++)
            getTable().getColumnModel().getColumn(i).setMinWidth(0);
        setSelectedIndex(0);

        //setCellAppearance();
        }

    /**
     * Устанавливает способ представления значений ячеек таблицы (визуальное отображение)
     */
    protected void setCellAppearance() {
        Component c;
        Color color;
        for(int i = 0; i < getTable().getRowCount(); i++) {
            if (ListSupplies.get(i).getAmountLeft() <= ListSupplies.get(i).getAmountMin())
                color = Color.RED;
            else color = Color.GREEN;
            
            //СПРОСИТЬ ВАДИКА!
            c = getTable().getCellRenderer(i, 5).getTableCellRendererComponent(jTableSupplyList, ListSupplies.get(i), false, false, i, 5);
            c.setForeground(color);
            //.setCellRenderer(getTable().getCellRenderer(i, 5));
        }
    }

    public Supply getSelectedItem(){
        try {
            return ListSupplies.get(getTable().getSelectedRow());
        }
        catch (IndexOutOfBoundsException ex) {
            return null;
        }
        catch (IllegalStateException ex){
            return null;
        }
    }

    public List<Supply> getSelectedItems(){
        List<Supply> res = new ArrayList<Supply>();
        for(int i = 0; i < getTable().getSelectedRowCount(); i++)
            try {
                res.add(ListSupplies.get(getTable().getSelectedRows()[i]));
            }
            catch (IndexOutOfBoundsException ex) {
                //return null;
            }
            catch (IllegalStateException ex){
                //return null;
            }
        return res;
    }


    public void setSelectedItem(Supply p){
        setSelectedIndex(ListSupplies.indexOf(p));
    }

    public int getSelectedIndex(){
        return getTable().getSelectedRow();
    }

    public void setSelectedIndex(int index){
        if (index < 0 || index >= getTable().getRowCount()) return;
        getTable().setRowSelectionInterval(index, index);

        JScrollBar Scroll = getScrollPane().getVerticalScrollBar();
        int tmp = (Scroll.getMaximum() - Scroll.getMinimum())
                *(ListSupplies.size() - index)/ListSupplies.size();
        Scroll.setValue(Scroll.getMaximum() - tmp);        
    }

    /**
     * @return the Editable
     */
    public boolean isEditable() {
        return Editable;
    }

    /**
     * @param Editable the Editable to set
     */
    public void setEditable(boolean Editable) {
        this.Editable = Editable;
        jPanelAddEditRemove1.setVisible(Editable);
    }

//class MyTableCellRenderer extends javax.​swing.​table.DefaultTableCellRender implements TableCellRenderer {
//
//    public MyTableCellRenderer() {
//        super();
//    }
//}

    private class DocumentListenerSearch implements DocumentListener {

        public DocumentListenerSearch() {
        }

        public void insertUpdate(DocumentEvent e) {
            Search(e);
        }

        public void removeUpdate(DocumentEvent e) {
            Search(e);
        }

        public void changedUpdate(DocumentEvent e) {
            Search(e);
        }
    }

}
