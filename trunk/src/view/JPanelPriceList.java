/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * JPanelPriceList.java
 *
 * Created on 26.02.2009, 17:50:46
 */

package view;

import entity.Price;
import java.util.List;
import javax.swing.JScrollBar;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import view.componentmodels.TMPrice;

/**
 *
 * @author ะต
 */
public class JPanelPriceList extends javax.swing.JPanel {

    private List<Price> ListPrices;

    /** Creates new form JPanelPriceList */
    public JPanelPriceList() {
        initComponents();
        getTable().setColumnSelectionAllowed(false);
    }

    public JPanelPriceList(List<Price> list) {
        this();
        setListPrices(list);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPanePriceList = new javax.swing.JScrollPane();
        jTablePriceList = new javax.swing.JTable();
        jPanelSearch = new view.JPanelSearch();

        jTablePriceList.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jTablePriceList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTablePriceList.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTablePriceList.setColumnSelectionAllowed(true);
        jTablePriceList.getTableHeader().setReorderingAllowed(false);
        jScrollPanePriceList.setViewportView(jTablePriceList);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPanePriceList, javax.swing.GroupLayout.DEFAULT_SIZE, 736, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanelSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(334, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jScrollPanePriceList, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private view.JPanelSearch jPanelSearch;
    private javax.swing.JScrollPane jScrollPanePriceList;
    private javax.swing.JTable jTablePriceList;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the jPanelSearch
     */
    public view.JPanelSearch getJPanelSearch() {
        return jPanelSearch;
    }

    /**
     * @return the jTablePriceList
     */
    public javax.swing.JTable getTable() {
        return jTablePriceList;
    }

    /**
     * @return the jScrollPanePriceList
     */
    public javax.swing.JScrollPane getScrollPane() {
        return jScrollPanePriceList;
    }

    public void setColumnVisible(int index, boolean isVisible){
        int tmp = 0;
        try {
            if (isVisible)
                tmp = ((TMPrice)getTable().getModel()).getColumnPreferredWidth(index);
        }
        catch (ClassCastException ex) {
            System.out.println(ex.getMessage());
        }
        getTable().getColumnModel().getColumn(index).setPreferredWidth(tmp);
    }

        /**
     * @return the ListPrices
     */
    public List<Price> getListPrices() {
        return ListPrices;
    }

    public void setListPrices(List<Price> list) {
        ListPrices = list;
        getTable().setModel(new TMPrice(ListPrices));
        for(int i = 0; i < getTable().getColumnCount(); i++)
            getTable().getColumnModel().getColumn(i).setMinWidth(0);
        setSelectedPrice(0);
    }

    public Price getSelectedPrice(){
        try {
            return ListPrices.get(getTable().getSelectedRow());
        }
        catch (IndexOutOfBoundsException ex) {
            return null;
        }
        catch (IllegalStateException ex){
            return null;
        }
    }

    public int getSelectedPriceIndex(){
        return getTable().getSelectedRow();
    }

    public void setSelectedPrice(Price p){
        setSelectedPrice(ListPrices.indexOf(p));
    }

    public void setSelectedPrice(int index){
        if (index < 0 || index >= getTable().getRowCount()) return;
        getTable().setRowSelectionInterval(index, index);

        JScrollBar Scroll = getScrollPane().getVerticalScrollBar();
        int tmp = (Scroll.getMaximum() - Scroll.getMinimum())
                *(ListPrices.size() - index)/ListPrices.size();
        Scroll.setValue(Scroll.getMaximum() - tmp);        
    }
}
